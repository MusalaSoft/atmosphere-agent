apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'application'

version = '0.0.2'
mainClassName = 'com.musala.atmosphere.agent.Agent'

jar {
    manifest {
        attributes 'Implementation-Title': 'Atmosphere Agent',
                   'Implementation-Version': version,
                   'Main-Class': mainClassName
    }
}

run {
    standardInput = System.in
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url 'http://repo.typesafe.com/typesafe/maven-releases/'
    }
}

configurations {
    onDeviceComponents
}

dependencies {
    compile 'com.musala.atmosphere:atmosphere-server-agent-lib:0.+'
    compile 'com.musala.atmosphere:atmosphere-agent-device-lib:0.+'
    compile 'commons-logging:commons-logging:1.2'
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.8'
    compile 'com.android.tools.ddms:ddmlib:25.1.3'
    compile 'org.hyperic:sigar:1.6.4'
    compile 'com.googlecode.mp4parser:isoparser:1.1.21'
    compile fileTree(dir: 'natives/', include: '*.*')
    compile 'gov.nist.math:scimark:2.0'
    // Fix for: 'Failed to load class "org.slf4j.impl.StaticLoggerBinder"' error message.
    // See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
    compile 'org.slf4j:slf4j-simple:1.7.21'
    compile 'io.github.bonigarcia:webdrivermanager:1.5.0'
    compile 'org.seleniumhq.selenium:selenium-java:2.47.1'
    compile 'commons-net:commons-net:3.5'
    compile 'org.reflections:reflections:0.9.9-RC1'

    compile 'org.glassfish.tyrus:tyrus-client:1.13.1'
    compile 'org.glassfish.tyrus:tyrus-container-grizzly-client:1.13.1'

    runtime 'org.apache.httpcomponents:httpclient:4.4.1'
    runtime 'org.apache.httpcomponents:httpcore:4.4.4'

    onDeviceComponents 'com.musala.atmosphere:atmosphere-ime:0.+'
    onDeviceComponents 'com.musala.atmosphere:atmosphere-service:0.+'
    onDeviceComponents 'com.musala.atmosphere:atmosphere-uiautomator-bridge:0.+'

    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'junit:junit:4.12'
}

task copyOnDeviceComponents(type: Copy) {
    into 'onDeviceComponents'
    from configurations.onDeviceComponents
    // exclude version
    rename { fileName -> fileName.replaceAll(/-\d+(\.\d+)+/, '') }
}

build.dependsOn copyOnDeviceComponents

task testJar(type: Jar)

publishing {
    publications {
        atmosphereAgent(MavenPublication) {
            groupId 'com.musala.atmosphere'
            artifactId 'atmosphere-agent'
            version version

            from components.java

            // Credit: http://stackoverflow.com/a/32353697/3370842
            pom.withXml {
                // Generate map of resolved versions
                Map resolvedVersionMap = [:]
                Set<ResolvedArtifact> resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.addAll(configurations.testCompile.getResolvedConfiguration().getResolvedArtifacts())
                resolvedArtifacts.each {
                    ModuleVersionIdentifier mvi = it.getModuleVersion().getId();
                    resolvedVersionMap.put("${mvi.getGroup()}:${mvi.getName()}", mvi.getVersion())
                }

                // Update dependencies with resolved versions
                asNode().dependencies.first().each {
                    def groupId = it.get("groupId").first().value().first()
                    def artifactId = it.get("artifactId").first().value().first()
                    it.get("version").first().value = resolvedVersionMap.get("${groupId}:${artifactId}")
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.class"
}

// Sigar native libraries
run {
    systemProperty 'java.library.path', file('natives')
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

test {
    forkEvery = 1
    systemProperty 'java.library.path', file('natives')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
